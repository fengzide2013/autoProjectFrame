/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConditionJFrame.java
 *
 * Created on 2010-7-5, 9:52:43
 */
package com.shunwang.autoProjectFrame.frame;

import com.shunwang.autoProjectFrame.constrain.Field;
import com.shunwang.autoProjectFrame.constrain.Table;
import com.shunwang.autoProjectFrame.fileProducer.ProjectFrameProducer;
import com.shunwang.autoProjectFrame.jdbc.DBConnection;
import com.shunwang.autoProjectFrame.jdbc.DBPassport;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Administrator
 */
public class ConditionJFrame extends javax.swing.JFrame {

    /** Creates new form ConditionJFrame */
    public ConditionJFrame() {
        initComponents();
        this.sqlServerConnectJDialog.setLocationRelativeTo(null);
        this.sqlServerConnectJDialog.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        defaultExtendsClassTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        operateButton = new javax.swing.JButton();
        tableNameTextField = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        selcetNonButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        conditionJTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        connectjMenu = new javax.swing.JMenu();
        sqlServerMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("工程框架自动生成工具");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("POJO默认父类名");

        defaultExtendsClassTextField.setText("BaseObject");

        jLabel2.setText("工程名称");

        projectNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNameTextFieldActionPerformed(evt);
            }
        });

        operateButton.setText("执行");
        operateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operateButtonActionPerformed(evt);
            }
        });

        tableNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableNameTextFieldActionPerformed(evt);
            }
        });

        selectButton.setText("选择");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        selectAllButton.setText("全选");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        selcetNonButton.setText("全不选");
        selcetNonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selcetNonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultExtendsClassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selcetNonButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                        .addComponent(operateButton)
                        .addGap(139, 139, 139))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(defaultExtendsClassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operateButton)
                    .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton)
                    .addComponent(selectAllButton)
                    .addComponent(selcetNonButton))
                .addContainerGap())
        );

        conditionJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "选择", "表名", "包名", "父类名"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(conditionJTable);

        connectjMenu.setText("连接");

        sqlServerMenuItem.setText("SQL Server 数据库");
        sqlServerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlServerMenuItemActionPerformed(evt);
            }
        });
        connectjMenu.add(sqlServerMenuItem);

        jMenuBar1.add(connectjMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void projectNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_projectNameTextFieldActionPerformed

    private void operateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operateButtonActionPerformed
        try {
            if (getPassport() == null) {
                JOptionPane.showMessageDialog(null, "请先连接数据库！", "提示", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String projectName = getProjectName();
            if (projectName == null || "".equals(projectName)) {
                JOptionPane.showMessageDialog(null, "请输入工程名！", "提示", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ProjectFrameProducer projectFrameProducer = new ProjectFrameProducer();
            projectFrameProducer.setListTable(getListTable());
            projectFrameProducer.setProjectName(projectName);
            projectFrameProducer.createProjectFrame();
            JOptionPane.showMessageDialog(null, "执行成功！", "提示", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "提示", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ConditionJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_operateButtonActionPerformed

    private void sqlServerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlServerMenuItemActionPerformed
        sqlServerConnectJDialog.setLocationRelativeTo(null);
        sqlServerConnectJDialog.setVisible(true);
    }//GEN-LAST:event_sqlServerMenuItemActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        String tableName = tableNameTextField.getText();
        if (tableName != null && !"".equals(tableName)) {
            DefaultTableModel tableModel = (DefaultTableModel) conditionJTable.getModel();
            int rowNum = tableModel.getRowCount();
            for (int i = 0; i < rowNum; i++) {
                String autoIncrement = (String) tableModel.getValueAt(i, 1);
                if (autoIncrement.startsWith(tableName)) {
                    tableModel.setValueAt(true, i, 0);
                }
            }
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void tableNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableNameTextFieldActionPerformed
        selectButtonActionPerformed(evt);
    }//GEN-LAST:event_tableNameTextFieldActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        setAll(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void selcetNonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selcetNonButtonActionPerformed
       setAll(false);
    }//GEN-LAST:event_selcetNonButtonActionPerformed
    private String getProjectName() {
        return projectNameTextField.getText();
    }
    private void setAll(boolean state){
         DefaultTableModel tableModel = (DefaultTableModel) conditionJTable.getModel();
            int rowNum = tableModel.getRowCount();
            for (int i = 0; i < rowNum; i++) {
                    tableModel.setValueAt(state, i, 0);
            }
    }
    private List<Table> getListTable() throws Exception {
        List<Table> listTable = new ArrayList<Table>();
        DefaultTableModel tableModel = (DefaultTableModel) conditionJTable.getModel();
        int rowNum = tableModel.getRowCount();
        for (int i = 0; i < rowNum; i++) {
            boolean autoIncrement = (Boolean) tableModel.getValueAt(i, 0);
            if (autoIncrement) {
                listTable.add(createTable(tableModel, i));
            }
        }
        return listTable;
    }

    private Table createTable(TableModel tableModel, int row) throws Exception {
        String defaultExtendsClass = defaultExtendsClassTextField.getText();
        String projectName = getProjectName();
        String tableName = (String) tableModel.getValueAt(row, 1);
        String packageName = (String) tableModel.getValueAt(row, 2);
        String extendsClass = (String) tableModel.getValueAt(row, 3);
        List<String> primaryKeys = DBConnection.getPrimaryKeys(passport, tableName);
        List<Field> listField = DBConnection.getTableStructure(passport, tableName);
        Table table = new Table();
        table.setTableName(tableName);
        if (defaultExtendsClass == null || "".equals(defaultExtendsClass)) {
            table.setExtendsClass(extendsClass);
        } else {
            table.setExtendsClass(defaultExtendsClass);
        }
        String fullPackageName = projectName;
        if (packageName == null || "".equals(packageName)) {
            fullPackageName = projectName + "." + table.getSimpleTableName();
        } else {
            fullPackageName = projectName + "." + packageName;
        }
        table.setPackageName(fullPackageName);
        table.setPrimaryKeys(primaryKeys);
        table.setListField(listField);
        return table;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    ConditionJFrame frame = new ConditionJFrame();
                    frame.setVisible(true);
                    frame.setLocationRelativeTo(null);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ConditionJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ConditionJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(ConditionJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ConditionJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable conditionJTable;
    private javax.swing.JMenu connectjMenu;
    private javax.swing.JTextField defaultExtendsClassTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton operateButton;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JButton selcetNonButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JMenuItem sqlServerMenuItem;
    private javax.swing.JTextField tableNameTextField;
    // End of variables declaration//GEN-END:variables
    private static DBPassport passport = null;
    private SQLServerConnectJDialog sqlServerConnectJDialog = new SQLServerConnectJDialog(this, true);
    private List<String> listTableName = new ArrayList<String>();

    public List<String> getListTableName() {
        return listTableName;
    }

    public void setListTableName(List<String> listTableName) {
        this.listTableName = listTableName;
    }

    public static DBPassport getPassport() {
        return passport;
    }

    public void setPassport(DBPassport passport) {
        ConditionJFrame.passport = passport;
    }

    public void initConditionJTable() {
        DefaultTableModel tableModel = (DefaultTableModel) conditionJTable.getModel();
        tableModel.setRowCount(0);
        for (String tableName : listTableName) {
            Object[] rowData = new Object[]{false, tableName, "", ""};
            tableModel.addRow(rowData);
        }
    }
}
