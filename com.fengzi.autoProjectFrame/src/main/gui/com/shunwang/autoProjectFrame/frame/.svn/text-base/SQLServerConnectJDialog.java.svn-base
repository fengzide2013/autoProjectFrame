/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DBInformationJDialog.java
 *
 * Created on 2010-5-25, 9:47:27
 */
package com.shunwang.autoProjectFrame.frame;

import com.shunwang.autoProjectFrame.documentProcess.PassportTextFileParse;
import com.shunwang.autoProjectFrame.jdbc.DBConnection;
import com.shunwang.autoProjectFrame.jdbc.DBPassport;
import java.sql.Connection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


import javax.swing.JComboBox;

/**
 *
 * @author Administrator
 */
public class SQLServerConnectJDialog extends javax.swing.JDialog {

    /** Creates new form DBInformationJDialog */
    public SQLServerConnectJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        portTextField.setText(getPort());
        dbNameComboBox.setModel(new DefaultComboBoxModel(getAllDBName()));
        userNameComboBox.setModel(new DefaultComboBoxModel(getAllUsers()));
        changePassword(getPassword());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        dbNameLable = new javax.swing.JLabel();
        userNameLable = new javax.swing.JLabel();
        passwordLable = new javax.swing.JLabel();
        dbNameComboBox = new javax.swing.JComboBox();
        userNameComboBox = new javax.swing.JComboBox();
        savaCheckBox = new javax.swing.JCheckBox();
        passwordField = new javax.swing.JPasswordField();
        portLabel = new javax.swing.JLabel();
        ipAddressComboBox = new javax.swing.JComboBox();
        ipAddressLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        cancleButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SQL SERVER 数据库连接");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setResizable(false);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        dbNameLable.setText("数据库名称：");

        userNameLable.setText("登录名：");

        passwordLable.setText("密码：");

        dbNameComboBox.setEditable(true);
        dbNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(getAllDBName()));
        dbNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbNameComboBoxActionPerformed(evt);
            }
        });

        userNameComboBox.setEditable(true);
        userNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(getAllUsers()));
        userNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userNameComboBoxItemStateChanged(evt);
            }
        });
        userNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameComboBoxActionPerformed(evt);
            }
        });

        savaCheckBox.setText("保存密码");
        savaCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                savaCheckBoxStateChanged(evt);
            }
        });
        savaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savaCheckBoxActionPerformed(evt);
            }
        });

        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFieldFocusGained(evt);
            }
        });

        portLabel.setText("端口：");

        ipAddressComboBox.setEditable(true);
        ipAddressComboBox.setModel(new javax.swing.DefaultComboBoxModel(getAllIp()));
        ipAddressComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipAddressComboBoxActionPerformed(evt);
            }
        });

        ipAddressLabel.setText("IP:");

        portTextField.setText(getPort());
        portTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(portLabel)
                        .addComponent(ipAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(userNameLable, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dbNameLable))
                    .addComponent(passwordLable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(savaCheckBox)
                    .addComponent(userNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addComponent(ipAddressComboBox, 0, 304, Short.MAX_VALUE)
                    .addComponent(portTextField))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipAddressLabel)
                    .addComponent(ipAddressComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbNameLable)
                    .addComponent(dbNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLable)
                    .addComponent(userNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLable)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savaCheckBox)
                .addContainerGap())
        );

        connectButton.setText("连接");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        cancleButton.setText("取消");
        cancleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(connectButton)
                        .addGap(40, 40, 40)
                        .addComponent(cancleButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(cancleButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savaCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savaCheckBoxActionPerformed

    private void dbNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbNameComboBoxActionPerformed
        userNameComboBox.setModel(new DefaultComboBoxModel(getAllUsers()));
        changePassword(getPassword());
    }//GEN-LAST:event_dbNameComboBoxActionPerformed

    private void savaCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_savaCheckBoxStateChanged
    }//GEN-LAST:event_savaCheckBoxStateChanged

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        DBPassport passport = createDBpassport();
        try {
            DBConnection.getConnection(passport);
            if (!listPassports.contains(passport)) {
                listPassports.add(passport);
            } else {
                updateListPassports(passport);
            }
            PassportTextFileParse.saveDBPassports(listPassports);
            ConditionJFrame frame = (ConditionJFrame) this.getParent();
            frame.setPassport(passport);
            List<String> listTables = DBConnection.getAllTableNames(passport);
            frame.setListTableName(listTables);
            frame.initConditionJTable();
            this.setVisible(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "数据库连接失败！", "错误提示", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(SQLServerConnectJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_connectButtonActionPerformed

    private void cancleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancleButtonActionPerformed

    private void passwordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusGained
    }//GEN-LAST:event_passwordFieldFocusGained

    private void userNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameComboBoxActionPerformed
    	changePassword(getPassword());
    }//GEN-LAST:event_userNameComboBoxActionPerformed

    private void userNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userNameComboBoxItemStateChanged
        // passwordField.setText(getPassword());
    }//GEN-LAST:event_userNameComboBoxItemStateChanged

    private void portTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextFieldActionPerformed
    }//GEN-LAST:event_portTextFieldActionPerformed

    private void ipAddressComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipAddressComboBoxActionPerformed
        portTextField.setText(getPort());
        dbNameComboBox.setModel(new DefaultComboBoxModel(getAllDBName()));
        userNameComboBox.setModel(new DefaultComboBoxModel(getAllUsers()));
        changePassword(getPassword());
    }//GEN-LAST:event_ipAddressComboBoxActionPerformed

    private DBPassport createDBpassport() {
        DBPassport passport = new DBPassport();
        passport.setIp(ipAddressComboBox.getSelectedItem().toString().trim());
        passport.setPort(portTextField.getText().trim());
        passport.setDbName(dbNameComboBox.getSelectedItem().toString().trim());
        passport.setUsername(userNameComboBox.getSelectedItem().toString().trim());
        passport.setSavePassword(savaCheckBox.isSelected());
        passport.setPassword(new String(passwordField.getPassword()));
        return passport;
    }

    private void updateListPassports(DBPassport currectPassport) {
        boolean isSavePassword = this.savaCheckBox.isSelected();
        for (DBPassport passport : listPassports) {
            if (passport.getIp().equals(currectPassport.getIp())) {
                passport.setPort(currectPassport.getPort());
            }
            if (passport.equals(currectPassport)  ) {
            	if(isSavePassword){
            		passport.setPassword(currectPassport.getPassword());
            	}else{
            		passport.setPassword("");
            	}
            }
        }
    }

    private void changePassword(String password){
    	passwordField.setText(password);
        if(password==null||"".equals(password)){
        	savaCheckBox.setSelected(false);
        }else{
        	savaCheckBox.setSelected(true);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                SQLServerConnectJDialog dialog = new SQLServerConnectJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancleButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JComboBox dbNameComboBox;
    private javax.swing.JLabel dbNameLable;
    private javax.swing.JComboBox ipAddressComboBox;
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLable;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JCheckBox savaCheckBox;
    private javax.swing.JComboBox userNameComboBox;
    private javax.swing.JLabel userNameLable;
    // End of variables declaration//GEN-END:variables
    private static List<DBPassport> listPassports = PassportTextFileParse.getDBpassports();

    private String getValueOfSelected(JComboBox comBox) {
        Object item = comBox.getSelectedItem();
        if (item == null) {
            return "";
        }
        return item.toString().trim();
    }

    private Object[] getAllIp() {
        Set<String> ip = new HashSet<String>();
        for (DBPassport passport : listPassports) {
            ip.add(passport.getIp());
        }
        return ip.toArray();
    }

    private String getPort() {
        String ip = getValueOfSelected(ipAddressComboBox);
        String port = "";
        for (DBPassport passport : listPassports) {
            if (passport.getIp().equals(ip)) {
                port = passport.getPort();
                break;
            }
        }
        return port;
    }

    private Object[] getAllDBName() {
        Set<String> dbnames = new HashSet<String>();
        String ip = getValueOfSelected(ipAddressComboBox);
        for (DBPassport passport : listPassports) {
            if (passport.getIp().equals(ip)) {
                dbnames.add(passport.getDbName());
            }
        }
        return dbnames.toArray();
    }

    private Object[] getAllUsers() {
        String ip = getValueOfSelected(ipAddressComboBox);
        String dbName = getValueOfSelected(dbNameComboBox);
        Set<String> users = new HashSet<String>();
        for (DBPassport passport : listPassports) {
            if (passport.getIp().equals(ip) && passport.getDbName().equals(dbName)) {
                users.add(passport.getUsername());
            }
        }
        return users.toArray();
    }

    private String getPassword() {
        String ip = getValueOfSelected(ipAddressComboBox);
        String dbName = getValueOfSelected(dbNameComboBox);
        String userName = getValueOfSelected(userNameComboBox);
        String password = "";
        for (DBPassport passport : listPassports) {
            if (passport.getIp().equals(ip) && passport.getDbName().equals(dbName) && passport.getUsername().equals(userName)) {
                password = passport.getPassword();
                break;
            }
        }
        return password;
    }
}
